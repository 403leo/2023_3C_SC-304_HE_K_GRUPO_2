
package com.mycompany.proyectoavance_estructuras2;

import Comunes.EnumDiscapacidad;
import static Comunes.EnumDiscapacidad.NO;
import static Comunes.EnumDiscapacidad.SI;
import Comunes.EnumEstacion;
import Comunes.EnumEstadoViaje;
import static com.mycompany.proyectoavance_estructuras2.MenuPrincipal.Estaciones;
import static com.mycompany.proyectoavance_estructuras2.MenuPrincipal.vagon;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;


public class Pantalla extends javax.swing.JFrame {

    static ListaDobleCircular Estaciones = new ListaDobleCircular();
    static Vagon vagon = new Vagon();
    public Thread t;
    NodoEstacion estacionActual;
    boolean banderaEstacion = false;

    
    public Pantalla() {
        initComponents();
        Estaciones.InsertarFilnal(llenarAlajuela());
        Estaciones.InsertarFilnal(llenarCartago());
        Estaciones.InsertarFilnal(llenarGuanacaste());
        Estaciones.InsertarFilnal(llenarHeredia());
        Estaciones.InsertarFilnal(llenarPuntarenas());
        Estaciones.InsertarFilnal(llenarSanJose());
        Estaciones.InsertarFilnal(llenarlIMON());

        t = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    movimientoVagon();
                } catch (InterruptedException ex) {
                    Logger.getLogger(Pantalla.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            public void movimientoVagon() throws InterruptedException {

                estacionActual = Estaciones.cabeza;
                while (true) {
                    
                    System.out.println("Estacion Actual");
                    System.out.println(estacionActual.elemento);
                    lblEstacion.setText(estacionActual.elemento.getEstacion().toString());
                    //agregarpasajeroEnEstacion(estacionActual.elemento);
                    System.out.println("personas entrando a la estacion");
                    System.out.println(vagon.toString());

                    jTextArea1.setText(estacionActual.elemento.toString());
                    //JOptionPane.showMessageDialog(null, estacionActual.elemento);
                    vagon.estacionActual = estacionActual.elemento;
                    vaciarVagon(estacionActual.elemento);
                    Pasajero pasajero = estacionActual.elemento.getColaNoDiscapacitada().desencolar();
                    while (true) {
                        if (pasajero == null) {
                            break;
                        }
                        if (!llenarVagon(pasajero)) {
                            estacionActual.elemento.getColaNoDiscapacitada().encolar(pasajero);
                            break;
                        }
                        pasajero = estacionActual.elemento.getColaNoDiscapacitada().desencolar();
                    }
                    pasajero = estacionActual.elemento.getColaDiscapacitada().desencolar();
                    while (true) {
                        if (pasajero == null) {
                            break;
                        }
                        if (!llenarFilaDiscapacitado(pasajero)) {
                            estacionActual.elemento.getColaDiscapacitada().encolar(pasajero);
                            break;
                        }
                        pasajero = estacionActual.elemento.getColaDiscapacitada().desencolar();
                    }
                    estacionActual = estacionActual.siguiente;

                    System.out.println("personas Saliendo a la estacion");
                    System.out.println(vagon.toString());

                    jTextArea2.setText(vagon.toString());

                    Thread.sleep(1000);//
                }
            }
        });
        t.start();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lblEstacion = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Estacion: ");

        lblEstacion.setText("jLabel2");

        jScrollPane1.setEnabled(false);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel2.setText("Vagon");

        jScrollPane2.setEnabled(false);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jButton1.setText("Agregar pasajero");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblEstacion)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(80, 80, 80))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(lblEstacion))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(67, 67, 67)
                .addComponent(jButton1)
                .addContainerGap(73, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        banderaEstacion = true;
        // Ciclo para agregar pasajeros a la estación actual
        do {
            int opcionAgregarPasajero = JOptionPane.showConfirmDialog(
                    null, "¿Desea agregar un pasajero a esta estación?",
                    "Agregar Pasajero", JOptionPane.YES_NO_OPTION);

            if (opcionAgregarPasajero == JOptionPane.YES_OPTION) {
                // Capturar detalles del pasajero desde el usuario
                String nombreCompleto = JOptionPane.showInputDialog("Ingrese su nombre completo: ");
                int edad = Integer.parseInt(JOptionPane.showInputDialog("Ingrese su edad: "));

                EnumDiscapacidad[] discapacidades = EnumDiscapacidad.values();
                EnumDiscapacidad discapacidad = (EnumDiscapacidad) JOptionPane.showInputDialog(
                        null,
                        "Seleccione la discapacidad:",
                        "Seleccionar Discapacidad",
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        discapacidades,
                        discapacidades[0] // Discapacidad por defecto
                );

                EnumEstacion[] estacionesDestino = EnumEstacion.values();
                EnumEstacion destino = (EnumEstacion) JOptionPane.showInputDialog(
                        null,
                        "Seleccione su estación de destino:",
                        "Seleccionar Estación",
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        estacionesDestino,
                        estacionesDestino[0] // Estación por defecto
                );

                Pasajero nuevoPasajero = new Pasajero(nombreCompleto, edad, estacionActual.elemento.getEstacion(), destino, discapacidad, 1, EnumEstadoViaje.En_Cola);

                switch (discapacidad) {
                    case NO:
                        estacionActual.elemento.getColaNoDiscapacitada().encolar(nuevoPasajero);
                        break;
                    case SI:
                        estacionActual.elemento.getColaDiscapacitada().encolar(nuevoPasajero);
                        break;
                    default:
                        throw new AssertionError();
                }

                System.out.println("Pasajero agregado a la cola en la estación actual: " + estacionActual.elemento.getEstacion());
            } else {
                // Si el usuario decide no agregar más pasajeros, salir del bucle interno
                break;
            }
        } while (true);

        banderaEstacion = true;
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Pantalla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Pantalla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Pantalla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Pantalla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Pantalla().setVisible(true);
            }
        });
    }

    static void vaciarVagon(Estacion destino) {
        // se bajan en la estacion correspondiente
        PilaPasajero pilaAux = new PilaPasajero(3);
        while (!vagon.getFila1().esVacia()) {
            Pasajero p = vagon.getFila1().desapilar();
            if (p.getDestino() != destino.getEstacion()) {
                pilaAux.apilar(p);
            } else {
                System.out.println("pasajero: " + p.getEstadoViaje());
            }
        }
        while (!pilaAux.esVacia()) {
            vagon.getFila1().apilar(pilaAux.desapilar());
        }
        pilaAux = new PilaPasajero(3);
        while (!vagon.getFila2().esVacia()) {
            Pasajero p = vagon.getFila2().desapilar();
            if (p.getDestino() != destino.getEstacion()) {
                pilaAux.apilar(p);
            } else {
                System.out.println("pasajero: " + p.getEstadoViaje());
            }
        }
        while (!pilaAux.esVacia()) {
            vagon.getFila2().apilar(pilaAux.desapilar());
        }
        pilaAux = new PilaPasajero(2);
        while (!vagon.getDiscapacitados().esVacia()) {
            Pasajero p = vagon.getDiscapacitados().desapilar();
            if (p.getDestino() != destino.getEstacion()) {
                pilaAux.apilar(p);
            } else {
                System.out.println("pasajero: " + p.getEstadoViaje());
            }
        }
        while (!pilaAux.esVacia()) {
            vagon.getDiscapacitados().apilar(pilaAux.desapilar());
        }
    }

    static boolean llenarVagon(Pasajero p) {
        Boolean bandera = true;
        if (vagon.getFila1().apilar(p)) {
            bandera = false;
        }
        if (bandera) {
            if (vagon.getFila2().apilar(p)) {
                bandera = false;
            }
        }
        return !bandera;
    }

    static boolean llenarFilaDiscapacitado(Pasajero p) {

        Boolean bandera = true;
        if (bandera) {
            if (vagon.getDiscapacitados().apilar(p)) {
                bandera = false;
            }
        }

        return !bandera;
    }

    static Estacion llenarCartago() {

        ColaPasajero cola1 = new ColaPasajero();

        cola1.encolar(new Pasajero(EnumEstacion.CARTAGO, EnumEstacion.SAN_JOSE, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.CARTAGO, EnumEstacion.ALAJUELA, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.CARTAGO, EnumEstacion.ALAJUELA, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.CARTAGO, EnumEstacion.GUANACASTE, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.CARTAGO, EnumEstacion.HEREDIA, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.CARTAGO, EnumEstacion.LIMON, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.CARTAGO, EnumEstacion.LIMON, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.CARTAGO, EnumEstacion.ALAJUELA, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.CARTAGO, EnumEstacion.HEREDIA, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        ColaPasajero cola2 = new ColaPasajero();

        cola2.encolar(new Pasajero(EnumEstacion.CARTAGO, EnumEstacion.SAN_JOSE, EnumDiscapacidad.SI, EnumEstadoViaje.En_Cola));
        cola2.encolar(new Pasajero(EnumEstacion.CARTAGO, EnumEstacion.ALAJUELA, EnumDiscapacidad.SI, EnumEstadoViaje.En_Cola));
        cola2.encolar(new Pasajero(EnumEstacion.CARTAGO, EnumEstacion.ALAJUELA, EnumDiscapacidad.SI, EnumEstadoViaje.En_Cola));
        cola2.encolar(new Pasajero(EnumEstacion.CARTAGO, EnumEstacion.GUANACASTE, EnumDiscapacidad.SI, EnumEstadoViaje.En_Cola));
        cola2.encolar(new Pasajero(EnumEstacion.CARTAGO, EnumEstacion.HEREDIA, EnumDiscapacidad.SI, EnumEstadoViaje.En_Cola));
        return new Estacion(cola2, cola1, EnumEstacion.CARTAGO);
    }

    static Estacion llenarlIMON() {

        ColaPasajero cola1 = new ColaPasajero();
//        cola1.encolar(new Pasajero("Leo", 1, EnumEstacion.LIMON, EnumEstacion.SAN_JOSE, EnumDiscapacidad.NO, 23, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.LIMON, EnumEstacion.SAN_JOSE, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.LIMON, EnumEstacion.ALAJUELA, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.LIMON, EnumEstacion.ALAJUELA, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.LIMON, EnumEstacion.GUANACASTE, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.LIMON, EnumEstacion.HEREDIA, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.LIMON, EnumEstacion.CARTAGO, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.LIMON, EnumEstacion.CARTAGO, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.LIMON, EnumEstacion.ALAJUELA, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.LIMON, EnumEstacion.HEREDIA, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        ColaPasajero cola2 = new ColaPasajero();

        cola2.encolar(new Pasajero(EnumEstacion.LIMON, EnumEstacion.SAN_JOSE, EnumDiscapacidad.SI, EnumEstadoViaje.En_Cola));
        cola2.encolar(new Pasajero(EnumEstacion.LIMON, EnumEstacion.ALAJUELA, EnumDiscapacidad.SI, EnumEstadoViaje.En_Cola));
        cola2.encolar(new Pasajero(EnumEstacion.LIMON, EnumEstacion.ALAJUELA, EnumDiscapacidad.SI, EnumEstadoViaje.En_Cola));
        cola2.encolar(new Pasajero(EnumEstacion.LIMON, EnumEstacion.GUANACASTE, EnumDiscapacidad.SI, EnumEstadoViaje.En_Cola));
        cola2.encolar(new Pasajero(EnumEstacion.LIMON, EnumEstacion.HEREDIA, EnumDiscapacidad.SI, EnumEstadoViaje.En_Cola));
        return new Estacion(cola2, cola1, EnumEstacion.LIMON);
    }

    static Estacion llenarAlajuela() {

        ColaPasajero cola1 = new ColaPasajero();
        cola1.encolar(new Pasajero(EnumEstacion.ALAJUELA, EnumEstacion.SAN_JOSE, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.ALAJUELA, EnumEstacion.CARTAGO, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.ALAJUELA, EnumEstacion.CARTAGO, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.ALAJUELA, EnumEstacion.GUANACASTE, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.ALAJUELA, EnumEstacion.HEREDIA, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.ALAJUELA, EnumEstacion.LIMON, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.ALAJUELA, EnumEstacion.LIMON, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.ALAJUELA, EnumEstacion.CARTAGO, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.ALAJUELA, EnumEstacion.HEREDIA, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        ColaPasajero cola2 = new ColaPasajero();

        cola2.encolar(new Pasajero(EnumEstacion.ALAJUELA, EnumEstacion.SAN_JOSE, EnumDiscapacidad.SI, EnumEstadoViaje.En_Cola));
        cola2.encolar(new Pasajero(EnumEstacion.ALAJUELA, EnumEstacion.CARTAGO, EnumDiscapacidad.SI, EnumEstadoViaje.En_Cola));
        cola2.encolar(new Pasajero(EnumEstacion.ALAJUELA, EnumEstacion.CARTAGO, EnumDiscapacidad.SI, EnumEstadoViaje.En_Cola));
        cola2.encolar(new Pasajero(EnumEstacion.ALAJUELA, EnumEstacion.GUANACASTE, EnumDiscapacidad.SI, EnumEstadoViaje.En_Cola));
        cola2.encolar(new Pasajero(EnumEstacion.ALAJUELA, EnumEstacion.HEREDIA, EnumDiscapacidad.SI, EnumEstadoViaje.En_Cola));
        return new Estacion(cola2, cola1, EnumEstacion.ALAJUELA);
    }

    static Estacion llenarHeredia() {

        ColaPasajero cola1 = new ColaPasajero();
        cola1.encolar(new Pasajero(EnumEstacion.HEREDIA, EnumEstacion.SAN_JOSE, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.HEREDIA, EnumEstacion.ALAJUELA, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.HEREDIA, EnumEstacion.ALAJUELA, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.HEREDIA, EnumEstacion.GUANACASTE, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.HEREDIA, EnumEstacion.CARTAGO, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.HEREDIA, EnumEstacion.LIMON, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.HEREDIA, EnumEstacion.LIMON, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.HEREDIA, EnumEstacion.ALAJUELA, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.HEREDIA, EnumEstacion.CARTAGO, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        ColaPasajero cola2 = new ColaPasajero();

        cola2.encolar(new Pasajero(EnumEstacion.HEREDIA, EnumEstacion.SAN_JOSE, EnumDiscapacidad.SI, EnumEstadoViaje.En_Cola));
        cola2.encolar(new Pasajero(EnumEstacion.HEREDIA, EnumEstacion.ALAJUELA, EnumDiscapacidad.SI, EnumEstadoViaje.En_Cola));
        cola2.encolar(new Pasajero(EnumEstacion.HEREDIA, EnumEstacion.ALAJUELA, EnumDiscapacidad.SI, EnumEstadoViaje.En_Cola));
        cola2.encolar(new Pasajero(EnumEstacion.HEREDIA, EnumEstacion.GUANACASTE, EnumDiscapacidad.SI, EnumEstadoViaje.En_Cola));
        cola2.encolar(new Pasajero(EnumEstacion.HEREDIA, EnumEstacion.CARTAGO, EnumDiscapacidad.SI, EnumEstadoViaje.En_Cola));
        return new Estacion(cola2, cola1, EnumEstacion.HEREDIA);
    }

    static Estacion llenarSanJose() {

        ColaPasajero cola1 = new ColaPasajero();
        cola1.encolar(new Pasajero(EnumEstacion.SAN_JOSE, EnumEstacion.CARTAGO, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.SAN_JOSE, EnumEstacion.ALAJUELA, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.SAN_JOSE, EnumEstacion.ALAJUELA, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.SAN_JOSE, EnumEstacion.GUANACASTE, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.SAN_JOSE, EnumEstacion.HEREDIA, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.SAN_JOSE, EnumEstacion.LIMON, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.SAN_JOSE, EnumEstacion.LIMON, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.SAN_JOSE, EnumEstacion.ALAJUELA, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.SAN_JOSE, EnumEstacion.HEREDIA, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        ColaPasajero cola2 = new ColaPasajero();

        cola2.encolar(new Pasajero(EnumEstacion.SAN_JOSE, EnumEstacion.CARTAGO, EnumDiscapacidad.SI, EnumEstadoViaje.En_Cola));
        cola2.encolar(new Pasajero(EnumEstacion.SAN_JOSE, EnumEstacion.ALAJUELA, EnumDiscapacidad.SI, EnumEstadoViaje.En_Cola));
        cola2.encolar(new Pasajero(EnumEstacion.SAN_JOSE, EnumEstacion.ALAJUELA, EnumDiscapacidad.SI, EnumEstadoViaje.En_Cola));
        cola2.encolar(new Pasajero(EnumEstacion.SAN_JOSE, EnumEstacion.GUANACASTE, EnumDiscapacidad.SI, EnumEstadoViaje.En_Cola));
        cola2.encolar(new Pasajero(EnumEstacion.SAN_JOSE, EnumEstacion.HEREDIA, EnumDiscapacidad.SI, EnumEstadoViaje.En_Cola));
        return new Estacion(cola2, cola1, EnumEstacion.SAN_JOSE);
    }

    static Estacion llenarGuanacaste() {

        ColaPasajero cola1 = new ColaPasajero();
        cola1.encolar(new Pasajero(EnumEstacion.GUANACASTE, EnumEstacion.SAN_JOSE, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.GUANACASTE, EnumEstacion.ALAJUELA, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.GUANACASTE, EnumEstacion.ALAJUELA, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.GUANACASTE, EnumEstacion.CARTAGO, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.GUANACASTE, EnumEstacion.HEREDIA, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.GUANACASTE, EnumEstacion.LIMON, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.GUANACASTE, EnumEstacion.LIMON, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.GUANACASTE, EnumEstacion.ALAJUELA, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.GUANACASTE, EnumEstacion.HEREDIA, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        ColaPasajero cola2 = new ColaPasajero();

        cola2.encolar(new Pasajero(EnumEstacion.GUANACASTE, EnumEstacion.SAN_JOSE, EnumDiscapacidad.SI, EnumEstadoViaje.En_Cola));
        cola2.encolar(new Pasajero(EnumEstacion.GUANACASTE, EnumEstacion.ALAJUELA, EnumDiscapacidad.SI, EnumEstadoViaje.En_Cola));
        cola2.encolar(new Pasajero(EnumEstacion.GUANACASTE, EnumEstacion.ALAJUELA, EnumDiscapacidad.SI, EnumEstadoViaje.En_Cola));
        cola2.encolar(new Pasajero(EnumEstacion.GUANACASTE, EnumEstacion.CARTAGO, EnumDiscapacidad.SI, EnumEstadoViaje.En_Cola));
        cola2.encolar(new Pasajero(EnumEstacion.GUANACASTE, EnumEstacion.HEREDIA, EnumDiscapacidad.SI, EnumEstadoViaje.En_Cola));
        return new Estacion(cola2, cola1, EnumEstacion.GUANACASTE);
    }

    static Estacion llenarPuntarenas() {

        ColaPasajero cola1 = new ColaPasajero();
        cola1.encolar(new Pasajero(EnumEstacion.PUNTARENAS, EnumEstacion.SAN_JOSE, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.PUNTARENAS, EnumEstacion.ALAJUELA, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.PUNTARENAS, EnumEstacion.ALAJUELA, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.PUNTARENAS, EnumEstacion.GUANACASTE, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.PUNTARENAS, EnumEstacion.HEREDIA, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.PUNTARENAS, EnumEstacion.LIMON, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.PUNTARENAS, EnumEstacion.LIMON, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.PUNTARENAS, EnumEstacion.ALAJUELA, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        cola1.encolar(new Pasajero(EnumEstacion.PUNTARENAS, EnumEstacion.HEREDIA, EnumDiscapacidad.NO, EnumEstadoViaje.En_Cola));
        ColaPasajero cola2 = new ColaPasajero();

        cola2.encolar(new Pasajero(EnumEstacion.PUNTARENAS, EnumEstacion.SAN_JOSE, EnumDiscapacidad.SI, EnumEstadoViaje.En_Cola));
        cola2.encolar(new Pasajero(EnumEstacion.PUNTARENAS, EnumEstacion.ALAJUELA, EnumDiscapacidad.SI, EnumEstadoViaje.En_Cola));
        cola2.encolar(new Pasajero(EnumEstacion.PUNTARENAS, EnumEstacion.ALAJUELA, EnumDiscapacidad.SI, EnumEstadoViaje.En_Cola));
        cola2.encolar(new Pasajero(EnumEstacion.PUNTARENAS, EnumEstacion.GUANACASTE, EnumDiscapacidad.SI, EnumEstadoViaje.En_Cola));
        cola2.encolar(new Pasajero(EnumEstacion.PUNTARENAS, EnumEstacion.HEREDIA, EnumDiscapacidad.SI, EnumEstadoViaje.En_Cola));
        return new Estacion(cola2, cola1, EnumEstacion.PUNTARENAS);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JLabel lblEstacion;
    // End of variables declaration//GEN-END:variables
}
